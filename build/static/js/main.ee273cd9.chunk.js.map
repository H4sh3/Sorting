{"version":3,"sources":["lib/etc.tsx","lib/quickSort.tsx","lib/bubbleSort.tsx","lib/selectionSort.tsx","lib/stoogeSort.tsx","lib/mergeSort.tsx","components/DataVis.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["random","max","Math","floor","randomArray","n","arr","i","push","swap","i1","i2","tmp","sleep","milliseconds","Promise","resolve","setTimeout","QUICK_SORT","partition","start","end","updateState","a","pivotValue","index","sum","quickSort","comparisons","BUBBLE_SORT","bubbleSort","counter","length","SELECTION_SORT","selectionSort","startIndex","smallest","Infinity","smallestIndex","STOOGE_SORT","stoogeSort","s","e","t","MERGE_SORT","mergeSort","left","right","forEach","merge","res","undefined","el","shift","DataVis","props","state","data","active","sorting","sorted","comparisonsMap","Map","algos","id","complexity","Menu","bind","AlgoList","AlgoEntry","this","randomizeData","style","margin","Container","backgroundColor","paddingTop","paddingBottom","VisualizeData","l","map","d","display","height","width","algoId","Row","Col","Button","disabled","variant","onClick","sort","className","get","marginTop","setState","algo","runSortingAlgo","low","high","updateComparison","comps","stateDataCopy","set","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ee273cd9.chunk.js","sourcesContent":["function randomInt(max: number) {\n  return Math.floor(random(max));\n}\n\nfunction random(max: number) {\n  return Math.random() * Math.floor(max);\n}\n\nfunction randomArray(n: number, max: number): number[] {\n  const arr: number[] = [];\n  for (let i: number = 0; i < n; i++) {\n    arr.push(random(max));\n  }\n  return arr;\n}\n\nfunction swap(arr: number[], i1: number, i2: number) {\n  const tmp = arr[i1];\n  arr[i1] = arr[i2];\n  arr[i2] = tmp;\n}\n\nfunction sleep(milliseconds: number) {\n  return new Promise(resolve => setTimeout(resolve, milliseconds));\n}\n\nfunction getPivot(arr: number[], low: number, high: number) {\n  return arr[Math.floor((low + high) / 2) - 1]\n}\n\nfunction isSorted(arr: number[]) {\n  for (let i: number = 0; i < arr.length - 1; i++) {\n    const e1 = arr[i]\n    const e2 = arr[i + 1]\n    if (e2 < e1) {\n      return false\n    }\n    i++;\n  }\n  return true\n}\n\nexport {\n  randomInt,\n  random,\n  randomArray,\n  swap,\n  sleep,\n  getPivot,\n  isSorted\n}","import { swap, sleep } from './etc';\n\nconst QUICK_SORT = 'Quick Sort';\n\nasync function partition(arr: number[], start: number, end: number, updateState: Function) {\n  // Use last element as the pivot\n  const pivotValue = arr[end];\n  let index: number = start;\n  let sum: number = 0;\n  for (let i = start; i < end; i++) {\n    sum++;\n    if (arr[i] < pivotValue) {\n      swap(arr, i, index)\n      index++;\n      updateState(arr, start, end)\n      await sleep(5)\n    }\n  }\n\n  swap(arr, index, end)\n  return { index, sum };\n};\n\nasync function quickSort(arr: number[], start: number, end: number, updateState: Function) {\n  let comparisons = 0;\n  if (start >= end) {\n    // Base case or terminating case\n    return 0;\n  }\n\n  let { index, sum } = await partition(arr, start, end, updateState);\n\n  sum += await quickSort(arr, start, index - 1, updateState);\n  sum += await quickSort(arr, index + 1, end, updateState);\n\n  comparisons += sum\n  return comparisons\n}\n\nexport {\n  QUICK_SORT,\n  quickSort,\n  partition\n}","import { swap, sleep } from './etc'\n\nconst BUBBLE_SORT = \"Bubble Sort\";\n\nasync function bubbleSort(arr: number[], updateState: Function) {\n  let counter: number = 0;\n  for (let n: number = arr.length; n > 1; --n) {\n    for (let i: number = 0; i < n - 1; ++i) {\n      counter += 1\n      if (arr[i] > arr[i + 1]) {\n        swap(arr, i, i + 1)\n      }\n    }\n    updateState(arr, 0, n, counter)\n    await sleep(10);\n  }\n  return counter;\n}\n\nexport {\n  bubbleSort,\n  BUBBLE_SORT\n}","import { swap, sleep } from \"./etc\";\n\nconst SELECTION_SORT = \"Selection Sort\";\n\nasync function selectionSort(arr: number[], updateState: Function) {\n  let counter = 0;\n  for (let startIndex = 0; startIndex < arr.length; startIndex++) {\n    let smallest: number = Infinity;\n    let smallestIndex: number = startIndex;\n    for (let i = startIndex; i < arr.length; i++) {\n      counter++;\n      if (arr[i] < smallest) {\n        smallest = arr[i];\n        smallestIndex = i;\n      }\n    }\n    swap(arr, startIndex, smallestIndex)\n    updateState(arr, startIndex, arr.length, counter)\n    await sleep(9)\n  }\n  return counter;\n}\n\nexport {\n  selectionSort,\n  SELECTION_SORT\n}","import { swap, sleep, random } from \"./etc\";\n\nconst STOOGE_SORT = \"Stooge Sort\";\n\nasync function stoogeSort(arr: number[], s: number, e: number, updateState: Function) {\n  let sum = 1;\n  if (arr[e - 1] < arr[s]) {\n    swap(arr, e - 1, s)\n    updateState(arr, s,e - 1)\n    if(random(1)>0.95){\n      await sleep(1)\n    }\n  }\n\n  if ((e - s) > 2) {\n    const t = Math.floor((e - s) / 3)\n    sum += await stoogeSort(arr, s, e - t, updateState)\n    sum += await stoogeSort(arr, s + t, e, updateState)\n    sum += await stoogeSort(arr, s, e - t, updateState)\n  }\n  return sum;\n}\n\nexport {\n  stoogeSort,\n  STOOGE_SORT\n}","import { sleep } from \"./etc\"\n\nconst MERGE_SORT: string = 'Merge Sort'\n\nasync function mergeSort(arr: number[], start: number, end: number, updateState: Function) {\n  if (arr.length <= 1) {\n    return arr\n  }\n\n  let left: number[] = []\n  let right: number[] = []\n\n  // split array in half\n  arr.forEach((e: number, index: number) => {\n    if (index < Math.floor(arr.length / 2)) {\n      left.push(e)\n    } else {\n      right.push(e)\n    }\n  });\n\n  left = await mergeSort(left, start, Math.floor(end / 2), updateState)\n  right = await mergeSort(right, Math.floor(end / 2), end, updateState)\n\n  //await sleep(15)\n  updateState(left, start, Math.floor(end / 2), 0)\n  updateState(right, Math.floor(end / 2), end, 0)\n\n  return await merge(left, right, start, end, updateState)\n}\n\nasync function merge(left: number[], right: number[], start: number, end: number, updateState: Function): Promise<number[]> {\n  let res: number[] = [];\n  let comparisons: number = 0\n  while (left.length > 0 && right.length > 0) {\n    comparisons += 1\n    if (left[0] <= right[0]) {\n      const el = left.shift();\n      if (el !== undefined) {\n        res.push(el)\n      }\n    } else {\n      const el = right.shift();\n      if (el !== undefined) {\n        res.push(el)\n      }\n    }\n  }\n\n  // add rest to result\n  if (left.length > 0) {\n    res = [...res, ...left]\n  }\n\n  if (right.length > 0) {\n    res = [...res, ...right]\n  }\n\n  await sleep(15)\n  updateState(res, start, end, comparisons)\n\n  return res;\n}\n\nexport {\n  mergeSort,\n  merge,\n  MERGE_SORT\n}","import React from 'react';\nimport { randomArray, sleep } from '../lib/etc';\nimport Button from 'react-bootstrap/Button';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport './DataVis.css';\n\n// sorting algos\nimport { quickSort, QUICK_SORT } from '../lib/quickSort';\nimport { bubbleSort, BUBBLE_SORT } from '../lib/bubbleSort';\nimport { selectionSort, SELECTION_SORT } from '../lib/selectionSort';\nimport { stoogeSort, STOOGE_SORT } from '../lib/stoogeSort';\nimport { mergeSort, MERGE_SORT } from '../lib/mergeSort';\n\ninterface IProps {\n\n}\n\ninterface IState {\n  data: number[],\n  active: Function,\n  sorting: boolean,\n  sorted: boolean,\n  comparisonsMap: Map<string, number>,\n  algos: { id: string, complexity: string }[]\n}\n\nexport class DataVis extends React.Component<IProps, IState>{\n  constructor(props: IProps) {\n    super(props)\n\n    this.state = {\n      data: [],\n      active: () => { return false },\n      sorting: false,\n      sorted: false,\n      comparisonsMap: new Map(),\n      algos: [\n        { id: QUICK_SORT, complexity: 'O(n*log(n))' },\n        { id: MERGE_SORT, complexity: 'O(n*log(n))' },\n        { id: BUBBLE_SORT, complexity: 'O(n²)' },\n        { id: SELECTION_SORT, complexity: 'O(n²)' },\n        { id: STOOGE_SORT, complexity: 'O(n^2.7095)' },\n      ]\n    }\n\n    this.Menu = this.Menu.bind(this);\n    this.AlgoList = this.AlgoList.bind(this);\n    this.AlgoEntry = this.AlgoEntry.bind(this);\n  }\n\n  componentDidMount() {\n    this.randomizeData()\n  }\n\n  render() {\n    return <span >\n      <h3 style={{ margin: \"1rem\" }}>Sorting Algorithms</h3>\n      <Container style={{ backgroundColor: \"grey\", paddingTop: \"4rem\", paddingBottom: \"4rem\" }}>\n        {this.VisualizeData(this.state.data, this.state.data.length)}\n      </Container>\n      <this.Menu></this.Menu>\n    </span>\n  }\n\n\n  VisualizeData(data: number[], l: number) {\n    return data.map((d, index) => <div key={index} style={{\n      display: \"inline-block\",\n      height: `${d}rem`,\n      margin: '1px',\n      width: `${35 / l}%`,\n      backgroundColor: this.state.sorted ? \"#00ff00\" : this.state.active(index) ? \"#0000ff\" : \"#000000\",\n    }}></div>)\n  }\n\n  AlgoList() {\n    return <>\n      {this.state.algos.map(a => {\n        return <this.AlgoEntry algoId={a.id} complexity={a.complexity} />\n      })}</>\n  }\n\n  AlgoEntry(props: { algoId: string, complexity: string }) {\n    return (\n      <Row >\n        <Col >\n          <Button disabled={this.state.sorting || this.state.sorted} variant=\"primary\" style={{ margin: \"2rem\" }} onClick={() => { this.sort(props.algoId) }}>{props.algoId}</Button>\n        </Col>\n        <Col className=\"CenteredText\">\n          {props.complexity}\n        </Col>\n        <Col className=\"CenteredText\">\n          {this.state.comparisonsMap.get(props.algoId)}\n        </Col>\n      </Row>\n    )\n  }\n\n  Menu() {\n    return (\n      <Container style={{ marginTop: \"1rem\", width: \"40%\" }}>\n        <Row>\n          <Col >\n            Algorithm\n          </Col>\n          <Col className=\"CenteredText\">\n            Complexity\n          </Col>\n          <Col className=\"CenteredText\">\n            Comparisons\n          </Col>\n        </Row>\n        <this.AlgoList />\n      </Container>\n    )\n  }\n\n  randomizeData() {\n    this.setState({ data: randomArray(100, 20), sorted: false })\n  }\n\n  async sort(algo: string) {\n    this.randomizeData()\n    this.setState({ sorting: true })\n    await sleep(15)\n    await this.runSortingAlgo(algo)\n    this.setState({ sorting: false, sorted: false, active: () => { return false } })\n  }\n\n  async runSortingAlgo(algo: string) {\n    switch (algo) {\n      case QUICK_SORT: {\n\n        const updateState = (arr: number[], low: number, high: number) => {\n          const active = (i: number) => {\n            return i >= low && i <= high;\n          }\n          this.setState({ data: arr, active })\n        }\n        const comparisons = await quickSort(this.state.data, 0, this.state.data.length - 1, updateState)\n        this.updateComparison(algo, comparisons);\n        break;\n      }\n      case BUBBLE_SORT: {\n        const updateState = (arr: number[], low: number, high: number) => {\n          const active = (i: number) => {\n            return i >= low && i <= high;\n          }\n          this.setState({ data: arr, active })\n        }\n        const comparisons = await bubbleSort(this.state.data, updateState)\n        this.updateComparison(algo, comparisons);\n        break;\n      }\n      case SELECTION_SORT: {\n        const updateState = (arr: number[], low: number, high: number) => {\n          const active = (i: number) => {\n            return i >= low && i <= high;\n          }\n          this.setState({ data: arr, active })\n        }\n        const comparisons = await selectionSort(this.state.data, updateState)\n        this.updateComparison(algo, comparisons);\n        break;\n      }\n      case STOOGE_SORT: {\n        const updateState = (arr: number[], low: number, high: number) => {\n          const active = (i: number) => {\n            return i >= low && i <= high;\n          }\n          this.setState({ data: arr, active })\n        }\n        const comparisons = await stoogeSort(this.state.data, 0, this.state.data.length, updateState)\n        this.updateComparison(algo, comparisons);\n\n        break;\n      }\n      case MERGE_SORT: {\n        let comps = 0;\n        const updateState = (arr: number[], start: number, end: number, comparisons: number) => {\n          comps += comparisons;\n          const active = (i: number) => {\n            return i >= start && i <= end;\n          }\n          const stateDataCopy: number[] = []\n          this.state.data.forEach(d => {\n            stateDataCopy.push(d)\n          })\n          arr.forEach((d, index) => {\n            stateDataCopy[index + start] = d\n          })\n          this.setState({ data: stateDataCopy, active })\n        }\n        const sorted = await mergeSort(this.state.data, 0, this.state.data.length - 1, updateState)\n\n        this.setState({ data: sorted })\n\n        this.updateComparison(algo, comps);\n\n        break;\n      }\n      default: {\n      }\n    }\n  }\n\n  updateComparison(algo: string, comparisons: number) {\n    const comparisonsMap = new Map(this.state.comparisonsMap)\n    comparisonsMap.set(algo, comparisons)\n    this.setState({ comparisonsMap })\n  }\n\n}","import React from 'react';\nimport './App.css';\nimport { DataVis } from './components/DataVis';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <DataVis></DataVis>\n    </div >\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}